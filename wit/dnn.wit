interface dnn {
	use mat.{mat};
	use types.{error-result, size, scalar, rect, blob-params, data-layout-type, padding-mode-type};

	enum net-backend-type {
		net-backend-default,
		net-backend-halide,
		net-backend-openvino,
		net-backend-opencv,
		net-backend-vkcom,
		net-backend-cuda,
	}

	enum net-target-type {
		net-target-cpu,
		net-target-fp32,
		net-target-fp16,
		net-target-vpu,
		net-target-vulkan,
		net-target-fpga,
		net-target-cuda,
		net-target-cuda-fp16,
	}

	resource layer {
		constructor();

		/// GetName returns the name of the layer.
		get-name: func() -> string;
	}

	resource net {
		/// ReadNet read deep learning network represented in one of the supported formats.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/4.x/d6/d0f/group__dnn.html#ga138439da76f26266fdefec9723f6c5cd
		read: static func(model: string, config: string) -> result<net, error-result>;

		/// ReadNetFromONNX reads a network model stored in ONNX framework's format.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/4.x/d6/d0f/group__dnn.html#ga9198ecaac7c32ddf0aa7a1bcbd359567
		read-from-ONNX: static func(model: string) -> result<net, error-result>;

		/// Close the network
		close: func();
		
		/// Empty returns true if there are no layers in the network.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/master/db/d30/classcv_1_1dnn_1_1Net.html#a6a5778787d5b8770deab5eda6968e66c
		empty: func() -> bool;

		/// SetInput sets the new input value for the network.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/trunk/db/d30/classcv_1_1dnn_1_1Net.html#a672a08ae76444d75d05d7bfea3e4a328
		set-input: func(input: mat, name: string) -> result<_, error-result>;
		
		/// Forward runs forward pass to compute output of layer with name outputName.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/trunk/db/d30/classcv_1_1dnn_1_1Net.html#a98ed94cb6ef7063d3697259566da310b
		forward: func(output-name: string) -> result<mat, error-result>;

		// ForwardLayers forward pass to compute outputs of layers listed in outBlobNames.
		//
		// For further details, please see:
		// https://docs.opencv.org/4.x/db/d30/classcv_1_1dnn_1_1Net.html#afe22e099b60a2883e220645391f68d4c
		forward-layers: func(output-names: list<string>) -> result<list<mat>, error-result>;

		/// GetUnconnectedOutLayers returns indexes of layers with unconnected outputs.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/4.x/db/d30/classcv_1_1dnn_1_1Net.html#ae26f0c29b3733d15d0482098ef9053e3
		get-unconnected-out-layers: func() -> result<list<u32>, error-result>;

		/// GetLayerNames returns names of layers in the network.
		///
		/// For further details, please see:
		/// hhttps://docs.opencv.org/4.x/db/d30/classcv_1_1dnn_1_1Net.html#a38e67098ae4ae5906bf8d8ea72199c2e
		get-layer-names: func() -> result<list<string>, error-result>;

		/// GetLayer returns layer with specified id.
		///
		/// For further details, please see:
		/// https://docs.opencv.org/4.x/db/d30/classcv_1_1dnn_1_1Net.html#ac944d7f2d3ead5ef9b1b2fa3885f3ff1
		get-layer: func(id: u32) -> result<layer, error-result>;
	}

	/// BlobFromImage creates 4-dimensional blob from image. Optionally resizes and crops image from center, 
	/// subtract mean values, scales values by scalefactor, swap Blue and Red channels.
	///
	/// For further details, please see:
	/// https://docs.opencv.org/4.x/d6/d0f/group__dnn.html#ga29f34df9376379a603acd8df581ac8d7
	blob-from-image: func(image: mat, scale-factor: f32, size: size, mean: scalar, swap-rb: bool, crop: bool) -> result<mat, error-result>;

	/// BlobFromImageWithParams creates 4-dimensional blob from image. Optionally resizes and crops image from center, 
	/// subtract mean values, scales values by scalefactor, swap Blue and Red channels.
	///
	/// For further details, please see:
	/// https://docs.opencv.org/4.x/d6/d0f/group__dnn.html#ga29f34df9376379a603acd8df581ac8d7
	blob-from-image-with-params: func(image: mat, params: blob-params) -> result<mat, error-result>;

	/// BlobRectsToImageRects converts blob rects to image rects.
	///
	/// For further details, please see:
	/// https://docs.opencv.org/4.4.0/d6/d0f/group__dnn.html#ga9d118d70a1659af729d01b10233213ee
	blob-rects-to-image-rects: func(params: blob-params, blob-rects: list<rect>, image-size: size) -> result<list<rect>, error-result>;

	/// NMSBoxes performs non maximum suppression given boxes and corresponding scores.
	///
	/// For futher details, please see:
	/// https://docs.opencv.org/4.4.0/d6/d0f/group__dnn.html#ga9d118d70a1659af729d01b10233213ee
	NMS-boxes: func(bboxes: list<rect>, scores: list<f32>, score-threshold: f32, nms-threshold: f32) -> result<list<u32>, error-result>;
}
